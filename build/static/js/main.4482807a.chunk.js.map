{"version":3,"sources":["ninjas.js","AddNinja.js","App.js","serviceWorker.js","index.js"],"names":["Ninjas","props","ninjaList","ninjasArray","map","element","age","react_default","a","createElement","className","key","id","name","belt","onClick","deleteNinja","AddNinja","state","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","newObj","assign","addArrayElement","onSubmit","this","htmlFor","type","onChange","Component","App","ninjas","newNinja","length","newArray","concat","toConsumableArray","deleteArrayElement","deletedArray","filter","src_AddNinja","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAoBeA,EAlBA,SAACC,GACZ,IACMC,EADQD,EAAME,YACIC,IAAK,SAAAC,GACzB,OAASA,EAAQC,IAAM,GACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,IAAMN,EAAQO,IACjCL,EAAAC,EAAAC,cAAA,oBAAaJ,EAAQQ,MACrBN,EAAAC,EAAAC,cAAA,mBAAYJ,EAAQC,KACpBC,EAAAC,EAAAC,cAAA,oBAAaJ,EAAQS,MACrBP,EAAAC,EAAAC,cAAA,UAAQM,QAAY,WAAOd,EAAMe,YAAYX,EAAQO,MAArD,WAED,OAEX,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACXR,WCmBCe,6MAhCXC,MAAQ,CACJL,KAAM,KACNP,IAAK,KACLQ,KAAM,QAEVK,aAAe,SAACC,GACZC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACMH,EAAEK,OAAOb,GAAMQ,EAAEK,OAAOC,WAGlCC,aAAe,SAACP,GACZA,EAAEQ,iBACF,IAAIC,EAASN,OAAOO,OAAQ,GAAGT,EAAKH,OACpCG,EAAKpB,MAAM8B,gBAAgBF,4EAI3B,OACAtB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMuB,SAAaC,KAAKN,cACpBpB,EAAAC,EAAAC,cAAA,SAAOyB,QAAQ,QAAf,SACA3B,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,OAAOvB,GAAG,OAAOwB,SAAYH,KAAKd,eAC9CZ,EAAAC,EAAAC,cAAA,SAAOyB,QAAQ,OAAf,QACA3B,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,OAAOvB,GAAG,MAAMwB,SAAYH,KAAKd,eAC7CZ,EAAAC,EAAAC,cAAA,SAAOyB,QAAQ,QAAf,SACA3B,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,OAAOvB,GAAG,OAAOwB,SAAYH,KAAKd,eAC9CZ,EAAAC,EAAAC,cAAA,iCA3BO4B,aCuCRC,6MApCbpB,MAAO,CACLqB,OAAQ,CACN,CAAE1B,KAAM,MAAOP,IAAK,GAAIQ,KAAM,QAASF,GAAI,GAC3C,CAAEC,KAAM,QAASP,IAAK,GAAIQ,KAAM,QAASF,GAAI,GAC7C,CAAEC,KAAM,UAAWP,IAAK,GAAIQ,KAAM,OAAQF,GAAI,OAGlDmB,gBAAkB,SAACS,GAEjBA,EAAS5B,GAAKS,EAAKH,MAAMqB,OAAOE,OAAS,EACzC,IAAIC,EAAQ,GAAAC,OAAApB,OAAAqB,EAAA,EAAArB,CAAOF,EAAKH,MAAMqB,QAAlB,CAA0BC,IACtCnB,EAAKC,SACH,CAAEiB,OAASG,OAIfG,mBAAqB,SAACjC,GACpB,IAAIkC,EAAezB,EAAKH,MAAMqB,OAAOQ,OAAQ,SAAA1C,GAC3C,OAAOA,EAAQO,KAAOA,IAExBS,EAAKC,SACH,CAAEiB,OAASO,6EAKX,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAC8B,EAAD,CAAQvB,YAAeiB,KAAKY,mBAAoB1C,YAAgB8B,KAAKf,MAAMqB,SAC3EhC,EAAAC,EAAAC,cAACuC,EAAD,CAAUjB,gBAAmBE,KAAKF,0BA/B1BM,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4482807a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Ninjas = (props) => {\r\n    const Array = props.ninjasArray;\r\n    const ninjaList = Array.map( element => {\r\n        return ( element.age > 20 ? (\r\n            <div className=\"ninja\" key= {element.id} >\r\n                <div>Name: { element.name }</div>\r\n                <div>Age: { element.age }</div>\r\n                <div>Belt: { element.belt }</div>\r\n                <button onClick = { () => {props.deleteNinja(element.id)} }>Delete</button>\r\n            </div>\r\n            ): null);\r\n        });\r\n    return (\r\n        <div className = \"ninjaList\">\r\n            { ninjaList }\r\n        </div>)  \r\n};\r\n\r\nexport default Ninjas;","import React, { Component } from 'react';\r\n\r\nclass AddNinja extends Component {\r\n    state = {\r\n        name: null,\r\n        age: null,\r\n        belt: null,\r\n    };\r\n    handleChange = (e) =>{\r\n        this.setState(\r\n           { [e.target.id] : e.target.value }\r\n        )\r\n    };\r\n    handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        let newObj = Object.assign ({},this.state);\r\n        this.props.addArrayElement(newObj);\r\n    };\r\n\r\n    render(){\r\n        return (\r\n        <div>\r\n            <form onSubmit = { this.handleSubmit }>\r\n                <label htmlFor=\"name\">Name:</label>\r\n                <input type=\"text\" id=\"name\" onChange= { this.handleChange } />\r\n                <label htmlFor=\"age\">Age:</label>\r\n                <input type=\"text\" id=\"age\" onChange= { this.handleChange } />\r\n                <label htmlFor=\"belt\">Belt:</label>\r\n                <input type=\"text\" id=\"belt\" onChange= { this.handleChange } />\r\n                <button>Submit</button>\r\n            </form>\r\n        </div>\r\n        )};\r\n};\r\n\r\nexport default AddNinja;","import React, { Component } from 'react';\nimport Ninjas from './ninjas';\nimport AddNinja from './AddNinja';\n\nclass App extends Component {\n  state= {\n    ninjas: [\n      { name: 'Ryu', age: 30, belt: 'black', id: 1 },\n      { name: 'Yoshi', age: 20, belt: 'green', id: 2 },\n      { name: 'Crystal', age: 25, belt: 'pink', id: 3 }\n    ]\n  };\n  addArrayElement = (newNinja) => {\n    //newNinja.id = Date.now();\n    newNinja.id = this.state.ninjas.length + 1;\n    let newArray = [...this.state.ninjas, newNinja];\n    this.setState(\n      { ninjas : newArray }\n    );   \n  };\n\n  deleteArrayElement = (id) => {\n    let deletedArray = this.state.ninjas.filter( element => {\n      return element.id !== id;\n    });\n    this.setState(\n      { ninjas : deletedArray }\n    );\n  };\n\n  render() {\n      return (\n        <div className=\"App\">\n          <h1>hello</h1>\n          <Ninjas deleteNinja = {this.deleteArrayElement} ninjasArray = { this.state.ninjas } />\n          <AddNinja addArrayElement = {this.addArrayElement}/>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}